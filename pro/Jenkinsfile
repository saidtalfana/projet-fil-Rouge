pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        SONARQUBE_SERVER = 'sonar-server'
        DOCKER_HUB_REPO = 'saidtalfana98/projet-fil-rouge'
        SONAR_TOKEN = credentials('sonar-credential')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/saidtalfana/projet-fil-Rouge.git'
            }
        }

        stage('Build and Unit Tests') {
            steps {
                dir('pro') {
                    bat "mvn clean install"
                    bat "mvn test"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    bat "mvn sonar:sonar -Dsonar.projectKey=pro_services -Dsonar.host.url=http://localhost:9000 -Dsonar.token=${SONAR_TOKEN}"
                }
            }
        }

//         stage('Quality Gate Check') {
//             steps {
//                 timeout(time: 5, unit: 'MINUTES') {
//                     waitForQualityGate abortPipeline: true
//                 }
//             }
//         }

        stage('Build Docker Images') {
            steps {
                 dir('pro') {
                     bat "docker build -t pro-service-image ."
                 }
            }
        }

        stage('Tag and Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", 'docker-hub-credential') {
                         bat """
                             docker push saidtalfana98/projet-fil-rouge:tagname
                         """
                    }
                }
            }
        }

//         stage('Run Docker Compose') {
//             steps {
//                 dir('artisanat-backend') {
//                     bat 'docker-compose up -d'
//                 }
//             }
//         }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}